#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>
#include <fstream>
#include <ctime>
#include <map>
#include <limits>

using namespace std;

class UniversitySystemException : public exception {
protected:
    string message;
    string timestamp;

public:
    UniversitySystemException(const string& msg) : message(msg) {
        time_t now = time(nullptr);
        timestamp = ctime(&now);
        timestamp.pop_back();
    }

    const char* what() const noexcept override { return message.c_str(); }
    string getTimestamp() const { return timestamp; }
};

class EnrollmentException : public UniversitySystemException {
public:
    EnrollmentException(const string& msg) : UniversitySystemException("Enrollment Error: " + msg) {}
};

class GradeException : public UniversitySystemException {
public:
    GradeException(const string& msg) : UniversitySystemException("Grade Error: " + msg) {}
};

class PaymentException : public UniversitySystemException {
public:
    PaymentException(const string& msg) : UniversitySystemException("Payment Error: " + msg) {}
};

class Logger {
public:
    static void log(const UniversitySystemException& ex) {
        ofstream logFile("error_log.txt", ios::app);
        logFile << ex.getTimestamp() << " - " << ex.what() << endl;
        logFile.close();
    }
};

class Person {
protected:
    string name, id, contact;
    int age;

public:
    Person(string name, int age, string id, string contact) {
        if (name.empty()) throw UniversitySystemException("Name cannot be empty");
        if (age <= 0) throw UniversitySystemException("Age must be positive");
        if (id.length() < 4) throw UniversitySystemException("Invalid ID");
        if (contact.length() < 10) throw UniversitySystemException("Invalid contact");
        this->name = name;
        this->age = age;
        this->id = id;
        this->contact = contact;
    }

    virtual void display() const {
        cout << "Name: " << name << ", ID: " << id << ", Contact: " << contact << endl;
    }

    virtual double getPayment() const { return 0; }
    string getId() const { return id; }
};

class Student : public Person {
    double gpa;

public:
    Student(string name, int age, string id, string contact, double gpa)
        : Person(name, age, id, contact) {
        if (gpa < 0 || gpa > 4.0) throw GradeException("Invalid GPA");
        this->gpa = gpa;
    }

    void display() const override {
        Person::display();
        cout << "GPA: " << gpa << endl;
    }

    double getPayment() const override { return 1500.0; }
};

class Professor : public Person {
    string department;

public:
    Professor(string name, int age, string id, string contact, string department)
        : Person(name, age, id, contact) {
        if (department.empty()) throw UniversitySystemException("Invalid department");
        this->department = department;
    }

    void display() const override {
        Person::display();
        cout << "Department: " << department << endl;
    }

    double getPayment() const override { return 5000.0; }
};

class Course {
    string code, title;
    Professor* instructor;
    vector<Student*> students;
    map<string, double> grades;
    int maxEnrollment = 30;

public:
    Course(string code, string title, Professor* instructor)
        : code(code), title(title), instructor(instructor) {
        if (code.empty() || title.empty()) throw UniversitySystemException("Invalid course details");
    }

    void enroll(Student* student) {
        if (students.size() >= maxEnrollment) throw EnrollmentException("Course full");
        students.push_back(student);
    }

    void addGrade(const string& studentId, double grade) {
        if (grade < 0 || grade > 100) throw GradeException("Invalid grade");
        grades[studentId] = grade;
    }

    void display() const {
        cout << "Course: " << code << " - " << title
             << ", Enrolled: " << students.size() << "/" << maxEnrollment << endl;
        instructor->display();
    }
};

class Department {
    string name;
    vector<Professor*> professors;
    vector<Course*> courses;

public:
    Department(string name) : name(name) {
        if (name.empty()) throw UniversitySystemException("Invalid department name");
    }

    void addProfessor(Professor* p) { professors.push_back(p); }
    void addCourse(Course* c) { courses.push_back(c); }

    void display() const {
        cout << "Department: " << name << endl;
        for (const auto& p : professors) p->display();
    }
};

class UniversitySystem {
    vector<Department> departments;
    vector<Student*> students;
    string semester = "Fall 2025";

public:
    void addDepartment(const Department& d) { departments.push_back(d); }
    void addStudent(Student* s) { students.push_back(s); }

    void newSemester(const string& s) {
        if (s.empty()) throw UniversitySystemException("Invalid semester");
        semester = s;
        cout << "Semester set to: " << s << endl;
    }

    void enroll(Student* s, Course* c) {
        try {
            c->enroll(s);
            cout << "Enrollment successful" << endl;
        } catch (const EnrollmentException& e) {
            Logger::log(e);
            throw;
        }
    }

    void assignProfessor(Professor* p, Course* c) {
        c->display();
        cout << "Professor assigned" << endl;
    }

    void enterGrade(Course* c, const string& studentId, double grade) {
        try {
            c->addGrade(studentId, grade);
            cout << "Grade recorded" << endl;
        } catch (const GradeException& e) {
            Logger::log(e);
            throw;
        }
    }

    void report() const {
        cout << "University Report - " << semester << endl;
        cout << "Departments: " << departments.size()
             << ", Students: " << students.size() << endl;
        for (const auto& d : departments) d.display();
    }
};

void menu() {
    cout << "\n====== University System Menu ======\n"
         << "1. New Semester\n"
         << "2. Add Department\n"
         << "3. Enroll Student\n"
         << "4. Assign Professor\n"
         << "5. Enter Grade\n"
         << "6. Generate Report\n"
         << "7. Exit\n"
         << "Enter your choice: ";
}

int main() {
    UniversitySystem uni;
    Professor* p = nullptr;
    Student* s = nullptr;
    Course* c = nullptr;

    try {
        p = new Professor("Dr. Smith", 40, "P101", "555-1234567", "CS");
        s = new Student("John", 20, "S101", "555-5678901", 3.5);
        c = new Course("CS101", "Programming", p);
        Department cs("Computer Science");
        cs.addProfessor(p);
        cs.addCourse(c);
        uni.addDepartment(cs);
        uni.addStudent(s);
    } catch (const UniversitySystemException& e) {
        cout << "Initialization Error: " << e.what() << endl;
        Logger::log(e);
        return 1;
    }

    int choice;
    do {
        #ifdef _WIN32
            system("cls");
        #else
            system("clear");
        #endif

        menu();
        cin >> choice;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        try {
            switch (choice) {
                case 1: {
                    string semester;
                    cout << "Enter semester: ";
                    getline(cin, semester);
                    uni.newSemester(semester);
                    break;
                }
                case 3:
                    uni.enroll(s, c);
                    break;
                case 4:
                    uni.assignProfessor(p, c);
                    break;
                case 5: {
                    double grade;
                    cout << "Enter grade: ";
                    cin >> grade;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    uni.enterGrade(c, s->getId(), grade);
                    break;
                }
                case 6:
                    uni.report();
                    break;
                case 7:
                    cout << "Exiting...\n";
                    break;
                default:
                    cout << "Invalid choice\n";
            }
        } catch (const UniversitySystemException& e) {
            cout << "Error: " << e.what() << endl;
            Logger::log(e);
        }

        cout << "\nPress Enter to continue...";
        cin.get();
    } while (choice != 7);

    delete p;
    delete s;
    delete c;

    return 0;
}
