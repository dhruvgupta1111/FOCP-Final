#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>

using namespace std;

class Person {
protected:
    string name;
    int age;
    string id;
    string contact;

public:
    Person(string name, int age, string id, string contact)
        : name(name), age(age), id(id), contact(contact) {}

    virtual ~Person() {}

    void setAge(int age) { 
        if (age <= 0) throw invalid_argument("Age must be positive");
        this->age = age;
    }

    void setName(string name) { 
        if (name.empty()) throw invalid_argument("Name cannot be empty");
        this->name = name; 
    }

    virtual void displayDetails() const {
        cout << "Name: " << name << ", Age: " << age << ", ID: " << id << ", Contact: " << contact << endl;
    }

    virtual double calculatePayment() const { return 0; }
};

class Professor : public Person {
protected:
    string department;
    int yearsOfService;
    double researchGrants;

public:
    Professor(string name, int age, string id, string contact, string department, int yearsOfService = 0, double researchGrants = 0.0)
        : Person(name, age, id, contact), department(department), yearsOfService(yearsOfService), researchGrants(researchGrants) {}

    virtual void displayDetails() const override {
        Person::displayDetails();
        cout << "Department: " << department << ", Years of Service: " << yearsOfService << ", Research Grants: " << researchGrants << endl;
    }

    virtual double calculatePayment() const override {
        double baseSalary = 4000.0;
        double salaryAdjustment = yearsOfService * 100;
        double researchGrantAdjustment = researchGrants * 0.1;

        return baseSalary + salaryAdjustment + researchGrantAdjustment;
    }

    void setYearsOfService(int years) {
        yearsOfService = years;
    }

    void setResearchGrants(double grants) {
        researchGrants = grants;
    }
};

class AssistantProfessor : public Professor {
public:
    AssistantProfessor(string name, int age, string id, string contact, string department, int yearsOfService = 0, double researchGrants = 0.0)
        : Professor(name, age, id, contact, department, yearsOfService, researchGrants) {}

    double calculatePayment() const override {
        double baseSalary = 5000.0;
        double salaryAdjustment = yearsOfService * 150;
        double researchGrantAdjustment = researchGrants * 0.15;

        return baseSalary + salaryAdjustment + researchGrantAdjustment;
    }
};

class AssociateProfessor : public Professor {
public:
    AssociateProfessor(string name, int age, string id, string contact, string department, int yearsOfService = 0, double researchGrants = 0.0)
        : Professor(name, age, id, contact, department, yearsOfService, researchGrants) {}

    double calculatePayment() const override {
        double baseSalary = 7000.0;
        double salaryAdjustment = yearsOfService * 200;
        double researchGrantAdjustment = researchGrants * 0.20;

        return baseSalary + salaryAdjustment + researchGrantAdjustment;
    }
};

class FullProfessor : public Professor {
public:
    FullProfessor(string name, int age, string id, string contact, string department, int yearsOfService = 0, double researchGrants = 0.0)
        : Professor(name, age, id, contact, department, yearsOfService, researchGrants) {}

    double calculatePayment() const override {
        double baseSalary = 10000.0;
        double salaryAdjustment = yearsOfService * 250;
        double researchGrantAdjustment = researchGrants * 0.25;

        return baseSalary + salaryAdjustment + researchGrantAdjustment;
    }
};

class Student : public Person {
protected:
    double gpa;

public:
    Student(string name, int age, string id, string contact, double gpa)
        : Person(name, age, id, contact), gpa(gpa) {}

    void setGpa(double gpa) {
        if (gpa < 0.0 || gpa > 4.0) throw invalid_argument("GPA must be between 0.0 and 4.0");
        this->gpa = gpa;
    }

    void displayDetails() const override {
        Person::displayDetails();
        cout << "GPA: " << gpa << endl;
    }

    double calculatePayment() const override {
        return 1500.0;
    }
};

class UndergraduateStudent : public Student {
private:
    string major;
    string minor;
    string expectedGraduationDate;

public:
    UndergraduateStudent(string name, int age, string id, string contact, double gpa,
                        string major, string minor, string expectedGraduationDate)
        : Student(name, age, id, contact, gpa), major(major), minor(minor), expectedGraduationDate(expectedGraduationDate) {}

    void displayDetails() const override {
        Student::displayDetails();
        cout << "Major: " << major << ", Minor: " << minor << ", Expected Graduation: " << expectedGraduationDate << endl;
    }
};

class GraduateStudent : public Student {
private:
    string researchTopic;
    string advisor;
    string thesisTitle;

public:
    GraduateStudent(string name, int age, string id, string contact, double gpa,
                    string researchTopic, string advisor, string thesisTitle)
        : Student(name, age, id, contact, gpa), researchTopic(researchTopic), advisor(advisor), thesisTitle(thesisTitle) {}

    void setResearchDetails(string researchTopic, string advisor, string thesisTitle) {
        this->researchTopic = researchTopic;
        this->advisor = advisor;
        this->thesisTitle = thesisTitle;
    }

    void displayDetails() const override {
        Student::displayDetails();
        cout << "Research Topic: " << researchTopic << ", Advisor: " << advisor << ", Thesis Title: " << thesisTitle << endl;
    }

    void trackTeachingAssistantship() {
        cout << "Graduate student is a Teaching Assistant." << endl;
    }

    void trackResearchAssistantship() {
        cout << "Graduate student is a Research Assistant." << endl;
    }
};

class Department {
private:
    string name;
    string location;
    vector<Professor*> professors;

public:
    Department(string name, string location) : name(name), location(location) {}

    void addProfessor(Professor* professor) {
        professors.push_back(professor);
    }

    void displayProfessors() const {
        cout << "Professors in the " << name << " Department:" << endl;
        for (const auto& prof : professors) {
            prof->displayDetails();
        }
    }
};

class Course {
private:
    string code;
    string title;
    int credits;
    Professor* instructor;

public:
    Course(string code, string title, int credits, Professor* instructor)
        : code(code), title(title), credits(credits), instructor(instructor) {}

    void displayDetails() const {
        cout << "Course Code: " << code << ", Title: " << title << ", Credits: " << credits << endl;
        instructor->displayDetails();
    }
};

class University {
private:
    vector<Department> departments;

public:
    void addDepartment(const Department& department) {
        departments.push_back(department);
    }

    void displayDepartments() const {
        for (const auto& department : departments) {
            department.displayProfessors();
        }
    }
};

int main() {
    AssistantProfessor ap("Dr. Jackson", 36, "P101", "567-1584", "Computer Science", 5, 10000);
    AssociateProfessor assocProf("Dr. Nelson", 40, "P102", "567-1685", "Math", 10, 15000);
    FullProfessor fp("Dr. Henderson", 50, "P103", "567-1574", "Physics", 20, 20000);

    ap.displayDetails();
    assocProf.displayDetails();
    fp.displayDetails();

    cout << "Assistant Professor Payment: $" << ap.calculatePayment() << endl;
    cout << "Associate Professor Payment: $" << assocProf.calculatePayment() << endl;
    cout << "Full Professor Payment: $" << fp.calculatePayment() << endl;

    return 0;
}
